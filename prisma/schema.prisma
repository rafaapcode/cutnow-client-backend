generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native"]
  previewFeatures = ["fullTextIndex"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  email        String         @unique @db.String
  nome         String         @db.String
  primeiroNome String         @db.String
  sobreNome    String         @db.String
  avatar       String         @db.String
  cpf          String?        @db.String
  solicitacoes Solicitacoes[]
  Agendamentos Agendamentos[]
}

model Barbearia {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  email           String         @unique @db.String
  senha           String         @db.String
  nome            String         @db.String
  nomeDaBarbearia String         @unique @db.String
  cnpj            String         @unique @db.String
  latitude        Int            @db.Int
  longitude       Int            @db.Int
  informacoes     InfoBarbearia
  servicos        Servicos[]
  barbeiro        Barbeiro[]
  solicitacoes    Solicitacoes[]
  Agendamentos    Agendamentos[]

  @@fulltext([email, latitude, longitude, nomeDaBarbearia])
}

type InfoBarbearia {
  cep                     String
  rua                     String
  bairro                  String
  cidade                  String
  estado                  String
  numero                  Int
  horarioAbertura         String
  horarioFechamento       String
  fotosEstruturaBarbearia String[] @default([""])
  fotoBanner              String   @default("")
  logo                    String   @default("")
  status                  String   @default("Fechado")
}

type Servicos {
  nomeService String
  tempoMedio  Int
  preco       Int
}

model Barbeiro {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  email        String         @unique @db.String
  nome         String         @db.String
  senha        String         @db.String
  cpf          String         @unique @db.String
  status       String         @default("Indispon√≠vel") @db.String
  informacoes  InfoBarbeiro?
  barbearia_id String         @db.ObjectId
  barbearia    Barbearia      @relation(fields: [barbearia_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  solicitacoes Solicitacoes[]
  Agendamentos Agendamentos[]
}

model Solicitacoes {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  tipoServico String  @db.String
  nomeCliente String  @db.String
  data        String  @db.String
  visualizado Boolean @default(false)

  emailCliente String @db.String
  usuario      User   @relation(fields: [emailCliente], references: [email], onDelete: Cascade, onUpdate: Cascade)

  barbearia_id String    @db.ObjectId
  barbearia    Barbearia @relation(fields: [barbearia_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  barbeiro_id String   @db.ObjectId
  barbeiro    Barbeiro @relation(fields: [barbeiro_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Agendamentos {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  tipoServico String @db.String
  nomeCliente String @db.String
  data        String @db.String

  emailCliente String @db.String
  usuario      User   @relation(fields: [emailCliente], references: [email], onDelete: Cascade, onUpdate: Cascade)

  barbearia_id String    @db.ObjectId
  barbearia    Barbearia @relation(fields: [barbearia_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  barbeiro_id String   @db.ObjectId
  barbeiro    Barbeiro @relation(fields: [barbeiro_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@fulltext([data, barbeiro_id])
}

type InfoBarbeiro {
  portfolio String[] @default([""])
  banner    String   @default("")
  foto      String   @default("")
  descricao String   @default("")
}
